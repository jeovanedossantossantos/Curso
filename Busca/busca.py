# -*- coding: utf-8 -*-
"""BuscaGulosa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1le3qelrWBIOpabzMN4OcgTdY06lvFw-z
"""

class Cidade:
    def __init__(self, nome):
        self.nome = nome
        self.visitada = False
        self.vizinhas = []
        self.distObjetivo = 0
        self.gulosa=[]
        self.uniforme=[]
        
        
        
        
    def addCidadeVizinha(self, cidade):
        self.vizinhas.append(cidade)
    
    def addDistanciaObjetivo(self, valor):
        self.distObjetivo = valor
    
    def listToString(self,s):      
        str1 = ""  
        for el in s:  
          str1 += el.cidade.nome + "  " + str(el.distancia)  + "\n"
    
        return str1  

    def show(self):
        print("Nome: ",self.nome,"   /   Distancia para Objetivo: ",self.distObjetivo,
              "\n",
              "Cidades Vizinhas \n"+ self.listToString(self.vizinhas))

class CidadeVizinha:
    def __init__(self, cidade, distancia):
        self.cidade = cidade
        self.distancia = distancia

class BuscaGulosa:
    def __init__(self, objetivo,listCidades):
        self.objetivo = objetivo
        self.achou = False
        self.listCidades = listCidades
        self.distTotal=0
        self.cidade_objetivo = self.getCidadeByName(objetivo)
    
    def exibirFronteira(self, fronteira):
        for i  in range(0, len(fronteira)):
            print("\n",fronteira[i].cidade.nome, "  -->   ", fronteira[i].cidade.distObjetivo)
    
    def getCidadeByName(self,nome):
      for i in self.listCidades:
        if i.nome.strip() == nome.strip():
          return i
                
    def buscar(self, inicio):
        cidade_atual = self.getCidadeByName(inicio)
        print("\n\n Cidade Atual: " ,cidade_atual.nome)
        cidade_atual.visitada = True
        
        if cidade_atual == self.cidade_objetivo:
            self.achou = True
        else: 
            #Lista das cidades vizinhas da cidade atual
            self.fronteira = []
            #Lista da distância das cidades vizinhas a atual
            ldistanciasCidadesVizinhas = []
            # Percorrer as cidades vizinhas adicionando a lista fronteira
            for i in cidade_atual.vizinhas:                
                if i.cidade.visitada == False:
                    i.cidade.visitada = True
                    self.fronteira.append(i)
                  #  distViz = getDistCidades(cidade_atual,i)
                   # distObj = getDistCidadeObj(i.cidade.distObjetivo)
                   # distAestrela = distViz+distObj
                    #ldistanciasCidadesVizinhas.append(distAestrela)
                    #custo uniforme
                    #ldistanciasCidadesVizinhas.append(getDistCidades(cidade_atual,i)
                    ldistanciasCidadesVizinhas.append(i.cidade.distObjetivo)
            #print(len(self.fronteira))
            self.exibirFronteira(self.fronteira)
            #print("custo minimo ",min(ldistanciasCidadesVizinhas))
            #Se existem cidades vizinhas, descobrir a com menor distância para cidade atual
            if len(self.fronteira) > 0:
              cidadeMenorDist = None   
              # fronteira contem cidades vizinhas
              for i in self.fronteira:
                 # custo uniforme
               
               #if i.distancia == min(ldistanciasCidadesVizinhas): 
                # cidadeMenorDist = i
                 # self.distTotal+= getDistCidades(cidadeMenorDist,cidade_atual)
                #  print("dist final = ",self.distTotal)
                if i.cidade.distObjetivo == min(ldistanciasCidadesVizinhas):                 
                  cidadeMenorDist = i 
                  self.distTotal+= getDistCidades(cidadeMenorDist,cidade_atual)
                  '''self.gulosa.append(cidade_atual)
                  self.gulosa.append(getDistCidades(cidadeMenorDist,cidade_atual))
                  self.gulosa.append(cidadeMenorDist.cidade.nome)'''
                  
                  print("dist final = ",self.distTotal)
                # Vai para próxima cidade mais perto da atual             
              BuscaGulosa.buscar(self,cidadeMenorDist.cidade.nome.strip())
class BuscaUniforme:
    def __init__(self, objetivo,listCidades):
        self.objetivo = objetivo
        self.achou = False
        self.listCidades = listCidades
        self.distTotal=0
        self.cidade_objetivo = self.getCidadeByName(objetivo)
    
    def exibirFronteiraUniforme(self, fronteira):
        for i  in range(0, len(fronteira)):
            print("\n",fronteira[i].cidade.nome, "  -->   ", fronteira[i].distancia)
    
    def getCidadeByName(self,nome):
      for i in self.listCidades:
        if i.nome.strip() == nome.strip():
          return i
                
    def buscar(self, inicio):
        cidade_atual = self.getCidadeByName(inicio)
        print("\n\n Cidade Atual: " ,cidade_atual.nome)
        '''for i in cidade_atual.vizinhas:
            print(i.cidade.nome)'''
        cidade_atual.visitada = True
        
        if cidade_atual == self.cidade_objetivo:
            self.achou = True
        else: 
            #Lista das cidades vizinhas da cidade atual
            self.fronteira = []
            #Lista da distância das cidades vizinhas a atual
            ldistanciasCidadesVizinhas = []
            # Percorrer as cidades vizinhas adicionando a lista fronteira
            lista_distancias =[]
            for i in cidade_atual.vizinhas:
                if i.cidade.visitada == False:
                    i.cidade.visitada = True
                    self.fronteira.append(i)
                    #distViz = getDistCidades(cidade_atual,i)
                    lista_distancias.append(i.distancia)
                    ldistanciasCidadesVizinhas.append(i.cidade.nome)
                    #print(i.cidade.nome,'',i.distancia)
            menor = min(lista_distancias)
            nome=''
            for i in cidade_atual.vizinhas:
                if i.distancia == menor:
                    nome = i.cidade.nome
                    print(nome,'',i.distancia,"Tamanhao:",len(cidade_atual.vizinhas))
                    self.distTotal+= getDistCidades(i,cidade_atual)
                    print("dist final = ",self.distTotal)
            #self.exibirFronteiraUniforme(self.fronteira)
            BuscaUniforme.buscar(self,nome.strip())
                    
                    
        #BuscaUniforme.buscar(self,cidadeMenorDist.cidade.nome.strip())
        '''for i in cidade_atual.vizinhas:                
                if i.cidade.visitada == False:
                    i.cidade.visitada = True
                    self.fronteira.append(i)
                  #  distViz = getDistCidades(cidade_atual,i)
                   # distObj = getDistCidadeObj(i.cidade.distObjetivo)
                   # distAestrela = distViz+distObj
                    #ldistanciasCidadesVizinhas.append(distAestrela)
                    #custo uniforme
                    ldistanciasCidadesVizinhas.append(getDistCidades(cidade_atual,i.cidade))
                    #ldistanciasCidadesVizinhas.append(i.cidade.distObjetivo)
            #print(len(self.fronteira))
            self.exibirFronteira(self.fronteira)
            #print("custo minimo ",min(ldistanciasCidadesVizinhas))
            #Se existem cidades vizinhas, descobrir a com menor distância para cidade atual
            if len(self.fronteira) > 0:
              cidadeMenorDist = None   
              # fronteira contem cidades vizinhas
              for i in self.fronteira:
                 # custo uniforme
               
               if i.distancia == min(ldistanciasCidadesVizinhas): 
                 cidadeMenorDist = i
                 self.distTotal+= getDistCidades(cidadeMenorDist,cidade_atual)
                 print("dist final = ",self.distTotal)
                #if i.cidade.distObjetivo == min(ldistanciasCidadesVizinhas):                 
                 # cidadeMenorDist = i
                  #self.distTotal+= getDistCidades(cidadeMenorDist,cidade_atual)
                  #print("dist final = ",self.distTotal)
                # Vai para próxima cidade mais perto da atual
                '''
              
#######################################################33
class BuscaA:
    def __init__(self, objetivo,listCidades):
        self.objetivo = objetivo
        self.achou = False
        self.listCidades = listCidades
        self.distTotal=0
        self.cidade_objetivo = self.getCidadeByName(objetivo)
    
    def exibirFronteiraUniforme(self, fronteira):
        for i  in range(0, len(fronteira)):
            print("\n",fronteira[i].cidade.nome, "  -->   ", fronteira[i].distancia)
    
    def getCidadeByName(self,nome):
      for i in self.listCidades:
        if i.nome.strip() == nome.strip():
          return i
                
    def buscar(self, inicio):
        cidade_atual = self.getCidadeByName(inicio)
        print("\n\n Cidade Atual: " ,cidade_atual.nome)
        '''for i in cidade_atual.vizinhas:
            print(i.cidade.nome)'''
        cidade_atual.visitada = True
        
        if cidade_atual == self.cidade_objetivo:
            self.achou = True
        else: 
            #Lista das cidades vizinhas da cidade atual
            self.fronteira = []
            #Lista da distância das cidades vizinhas a atual
            ldistanciasCidadesVizinhas = []
            # Percorrer as cidades vizinhas adicionando a lista fronteira
            lista_distancias =[]
            for i in cidade_atual.vizinhas:
                if i.cidade.visitada == False:
                    i.cidade.visitada = True
                    self.fronteira.append(i)
                    #distViz = getDistCidades(cidade_atual,i)
                    lista_distancias.append(i.distancia)
                    ldistanciasCidadesVizinhas.append(i.cidade.nome)
                    #print(i.cidade.nome,'',i.distancia)
            menor = min(lista_distancias)
            nome=''
            for i in cidade_atual.vizinhas:
                distViz = getDistCidades_es(cidade_atual,i)
                distObj = getDistCidadeObj(i.cidade.distObjetivo)
                distAestrela = distViz+distObj
                ldistanciasCidadesVizinhas.append(distAestrela)
                print(cidade_atual,'','',i,'',distAestrela)
                ''' if i.distancia == menor:
                    nome = i.cidade.nome
                    print(nome,'',i.distancia,"Tamanhao:",len(cidade_atual.vizinhas))
                    self.distTotal+= getDistCidades(i,cidade_atual)
                    print("dist final = ",self.distTotal)
            #self.exibirFronteiraUniforme(self.fronteira)'''
               
            BuscaA.buscar(self,nome.strip())
def getDistCidades_es(cidadeA, cidadeB):
        listViz = cidadeB.vizinhas
        #listViz = cidadeB
        #print(listViz)
        for i in listViz:
            
            if (cidadeA.cidade.nome == i.cidade.nome):
                return i.distancia
        return 0
                    
                    
        #BuscaUniforme.buscar(self,cidadeMenorDist.cidade.nome.strip())
        '''for i in cidade_atual.vizinhas:                
                if i.cidade.visitada == False:
                    i.cidade.visitada = True
                    self.fronteira.append(i)
                  #  distViz = getDistCidades(cidade_atual,i)
                   # distObj = getDistCidadeObj(i.cidade.distObjetivo)
                   # distAestrela = distViz+distObj
                    #ldistanciasCidadesVizinhas.append(distAestrela)
                    #custo uniforme
                    ldistanciasCidadesVizinhas.append(getDistCidades(cidade_atual,i.cidade))
                    #ldistanciasCidadesVizinhas.append(i.cidade.distObjetivo)
            #print(len(self.fronteira))
            self.exibirFronteira(self.fronteira)
            #print("custo minimo ",min(ldistanciasCidadesVizinhas))
            #Se existem cidades vizinhas, descobrir a com menor distância para cidade atual
            if len(self.fronteira) > 0:
              cidadeMenorDist = None   
              # fronteira contem cidades vizinhas
              for i in self.fronteira:
                 # custo uniforme
               
               if i.distancia == min(ldistanciasCidadesVizinhas): 
                 cidadeMenorDist = i
                 self.distTotal+= getDistCidades(cidadeMenorDist,cidade_atual)
                 print("dist final = ",self.distTotal)
                #if i.cidade.distObjetivo == min(ldistanciasCidadesVizinhas):                 
                 # cidadeMenorDist = i
                  #self.distTotal+= getDistCidades(cidadeMenorDist,cidade_atual)
                  #print("dist final = ",self.distTotal)
                # Vai para próxima cidade mais perto da atual
                '''
import pandas as pd
path1 = "DistanciaHeuristica.txt"
df1 = pd.read_csv(path1)
path2 = "DistanciaCidadesVizinhas.txt"
df2 = pd.read_csv(path2)

listDistanciaHeuristica = df1.values.tolist()
listDistanciaCidadesVizinhas = df2.values.tolist()

listCidades = []

#Percorre o arquivo que contém a lista das cidades, e a distância aproximada de cada uma até o objetivo
for i in df1.values.tolist(): 
   # print(i)
    cidadeA = Cidade(i[0])
    cidadeA.addDistanciaObjetivo(i[1])
    # Percorre o arquivo que contém a lista das cidades vizinhas, e a distância entre elas.
    # Para conectar as cidades vizinhas numa lista de objetos do tipo Cidade
    for j in df2.values.tolist(): 
      #print(j)
      if i[0].strip() == j[0].strip():
        cidadeB = Cidade(j[1]) 
        for z in df1.values.tolist():             
          if z[0].strip() == j[1].strip():
            cidadeB.addDistanciaObjetivo(z[1])       
            
        cidadeviz = CidadeVizinha(cidadeB,j[2])
        cidadeA.addCidadeVizinha(cidadeviz)  
    #cidadeA.show()
    listCidades.append(cidadeA)
   
    # cidadeA = obj CidadeVizinha
def getDistCidades(cidadeA, cidadeB):
        listViz = cidadeB.vizinhas
        #listViz = cidadeB
        #print(listViz)
        for i in listViz:
            
            if (cidadeA.cidade.nome == i.cidade.nome):
                return i.distancia
        return 0
    
def getDistCidadeObj(cidadeA):
    return cidadeA.distObjetivo
distancia = 350
print("===================================")
print("============Gulosa=================")  
busca = BuscaGulosa("Bucharest",listCidades)
busca.buscar("Arad")



path1 = "DistanciaHeuristica.txt"
df1 = pd.read_csv(path1)
path2 = "DistanciaCidadesVizinhas.txt"
df2 = pd.read_csv(path2)

listDistanciaHeuristica = df1.values.tolist()
listDistanciaCidadesVizinhas = df2.values.tolist()

listCidades = []

#Percorre o arquivo que contém a lista das cidades, e a distância aproximada de cada uma até o objetivo
for i in df1.values.tolist(): 
   # print(i)
    cidadeA = Cidade(i[0])
    cidadeA.addDistanciaObjetivo(i[1])
    # Percorre o arquivo que contém a lista das cidades vizinhas, e a distância entre elas.
    # Para conectar as cidades vizinhas numa lista de objetos do tipo Cidade
    for j in df2.values.tolist(): 
      #print(j)
      if i[0].strip() == j[0].strip():
        cidadeB = Cidade(j[1]) 
        for z in df1.values.tolist():             
          if z[0].strip() == j[1].strip():
            cidadeB.addDistanciaObjetivo(z[1])       
            
        cidadeviz = CidadeVizinha(cidadeB,j[2])
        cidadeA.addCidadeVizinha(cidadeviz)  
    #cidadeA.show()
    listCidades.append(cidadeA)
   
print("===================================")
print("============Uniforme===============")
busca = BuscaUniforme("Bucharest",listCidades)
busca.buscar("Arad")


path1 = "DistanciaHeuristica.txt"
df1 = pd.read_csv(path1)
path2 = "DistanciaCidadesVizinhas.txt"
df2 = pd.read_csv(path2)

listDistanciaHeuristica = df1.values.tolist()
listDistanciaCidadesVizinhas = df2.values.tolist()

listCidades = []

#Percorre o arquivo que contém a lista das cidades, e a distância aproximada de cada uma até o objetivo
for i in df1.values.tolist(): 
   # print(i)
    cidadeA = Cidade(i[0])
    cidadeA.addDistanciaObjetivo(i[1])
    # Percorre o arquivo que contém a lista das cidades vizinhas, e a distância entre elas.
    # Para conectar as cidades vizinhas numa lista de objetos do tipo Cidade
    for j in df2.values.tolist(): 
      #print(j)
      if i[0].strip() == j[0].strip():
        cidadeB = Cidade(j[1]) 
        for z in df1.values.tolist():             
          if z[0].strip() == j[1].strip():
            cidadeB.addDistanciaObjetivo(z[1])       
            
        cidadeviz = CidadeVizinha(cidadeB,j[2])
        cidadeA.addCidadeVizinha(cidadeviz)  
    #cidadeA.show()
    listCidades.append(cidadeA)
print("===================================")
print("================A*=================")
busca = BuscaA("Bucharest",listCidades)
busca.buscar("Arad")


